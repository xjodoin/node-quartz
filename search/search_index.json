{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Node Quartz","text":"<p>Distributed, resilient, Redis\u2011backed job scheduler for Node.js with cron support, multi\u2011queue workers, retries + DLQ, definition stores, and a focused CLI.</p> <ul> <li>Cron with seconds and optional per\u2011job timezone</li> <li>Redis keyspace notification scheduling and jittered master election</li> <li>Multi\u2011queue workers (<code>BLMOVE</code> with <code>RPOPLPUSH</code> fallback)</li> <li>Retries with backoff + failed queue</li> <li>Job Definitions Store (memory/file/custom) synced across instances</li> <li>Powerful CLI for failed jobs and definitions</li> <li>TypeScript types, CI, Docker Compose tests</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation</li> <li>Usage</li> <li>CLI</li> <li>Job Store</li> <li>Architecture</li> <li>API</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Node.js &gt;= 14</li> <li>Redis with keyspace notifications for expired events enabled: <code>notify-keyspace-events Ex</code></li> </ul>"},{"location":"api/","title":"API","text":"<pre><code>import create = require('node-quartz');\n\nconst quartz = create(options?: CreateOptions);\n\ninterface Scheduler {\n  scheduleJob(job: Job): void;\n  getJob(jobId: string, cb: (err: any, job?: Job | null) =&gt; void): void;\n  removeJob(jobId: string, cb: (err: any, res?: number) =&gt; void): void;\n  listJobsKey(cb: (err: any, keys?: string[]) =&gt; void): void;\n  close(cb?: (err?: any) =&gt; void): Promise&lt;void&gt; | void;\n  events: EventEmitter;\n}\n</code></pre> <p>See README for detailed options and events.</p>"},{"location":"architecture/","title":"Architecture","text":"<pre><code>            +--------------------------+\n            |      Job Store (opt)     |\n            |  - memory / file / custom|\n            +------------+-------------+\n                         | load() / upsert\n                         v\n                +------------------+\n                |      Redis       |\n                |------------------|\n                | defs:index (SET) |\n                | defs:&lt;id&gt; (STR)  |&lt;-- CLI defs:add/remove/reload\n                | defs:events (PUB)|----^ \n                |                  |\n                | jobs (LIST/KEYS) |&lt;-- enqueue/TTL (:next/:retry)\n                | processing (LIST)|\n                | failed (LIST)    |&lt;-- CLI failed:*\n                | master (KEY)     |\n                +--------+---------+\n                         ^\n      pubsub (events)    |      keyspace events (expired)\n   +---------------------+----------------------+\n   |                                            |\n   v                                            v\n+--+----------------+                    +------+---------------+\n|  Scheduler A      |                    |  Scheduler B        |\n|-------------------|                    |---------------------|\n| - master election |&lt;-- heartbeat -----&gt;| - standby/worker    |\n| - schedule cron   |                    | - schedule on events|\n| - worker loop     |&lt;-- BL/MOVE/RPOP --&gt;| - worker loop       |\n| - processors      |                    | - processors        |\n+--+----------------+                    +------+---------------+\n</code></pre>"},{"location":"cli/","title":"CLI","text":"<p>Install globally or use via <code>npx</code>.</p>"},{"location":"cli/#failed-queue","title":"Failed Queue","text":"<ul> <li>List: <code>quartz failed:list --prefix quartz --redis redis://localhost:6379 --count 20</code></li> <li>Requeue: <code>quartz failed:requeue --idx 0 --reset</code></li> <li>Delete: <code>quartz failed:delete --idx 0</code></li> <li>Export: <code>quartz failed:drain-to-file --out failed.json --purge</code></li> <li>Import: <code>quartz failed:import-from-file --in failed.json</code></li> <li>By id: <code>failed:get|requeue-id|delete-id</code></li> </ul>"},{"location":"cli/#definitions","title":"Definitions","text":"<ul> <li>List: <code>quartz defs:list</code></li> <li>Add: <code>quartz defs:add --file job.json</code></li> <li>Remove: <code>quartz defs:remove --id job_id</code></li> <li>Reload: <code>quartz defs:reload</code></li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>It's on NPM:</p> <pre><code>npm install node-quartz\n</code></pre>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Node.js &gt;= 14</li> <li>Redis 6.x+ recommended (keyspace notifications with <code>Ex</code>)</li> </ul> <p>Enable keyspace notifications for expired events:</p> <pre><code>redis-server --notify-keyspace-events Ex\n# or at runtime\nredis-cli CONFIG SET notify-keyspace-events Ex\n</code></pre>"},{"location":"llms/","title":"LLM Context Files","text":"<p>This site provides LLM-friendly context files at the repository root to help language models use the project effectively:</p> <ul> <li>/llms.txt: Curated summary for LLMs, with links to the key Markdown docs and references</li> <li>/llms-full.txt: Expanded context with inline copies of the most important docs and examples</li> </ul> <p>If these links do not resolve on GitHub Pages, use the raw GitHub links:</p> <ul> <li>llms.txt (raw)</li> <li>llms-full.txt (raw)</li> </ul> <p>For more about the llms.txt proposal, see the community resources listed at llmstxt.org.</p>"},{"location":"store/","title":"Job Store","text":"<p>Use a store to preload and synchronize job definitions across instances. The scheduler persists definitions in Redis and schedules them locally.</p>"},{"location":"store/#memory-store","title":"Memory Store","text":"<pre><code>create({ store: { type: 'memory', jobs: [ /* Job objects */ ] } });\n</code></pre>"},{"location":"store/#file-store","title":"File Store","text":"<p><code>jobs.json</code> should contain an array of Job objects.</p> <pre><code>create({ store: { type: 'file', path: './jobs.json' } });\n</code></pre>"},{"location":"store/#custom-store","title":"Custom Store","text":"<p>Provide an object implementing <code>load/list/save/remove</code>.</p> <pre><code>const myStore = { async load() { return [...]; }, async list(){...}, async save(job){...}, async remove(id){...} };\ncreate({ store: { type: 'custom', impl: myStore } });\n</code></pre>"},{"location":"store/#redis-keys","title":"Redis Keys","text":"<ul> <li><code>&lt;prefix&gt;:defs:index</code> \u2014 set of job ids</li> <li><code>&lt;prefix&gt;:defs:&lt;id&gt;</code> \u2014 stringified Job</li> <li><code>&lt;prefix&gt;:defs:events</code> \u2014 pub/sub channel: <code>{action:'upsert'|'remove'|'reload', id?}</code></li> </ul>"},{"location":"usage/","title":"Usage","text":"<pre><code>const create = require('node-quartz');\n\nconst quartz = create({\n  scriptsDir: '/path/to/scripts',\n  prefix: 'quartz',\n  queues: ['default'],\n  redis: { url: process.env.REDIS_URL || 'redis://localhost:6379' }\n});\n\nconst job = {\n  id: 'example-job',\n  script: 'myScript',\n  cron: '*/10 * * * * *',\n  data: { any: 'payload' },\n  options: { endDate: new Date(Date.now() + 60_000) }\n};\n\nquartz.scheduleJob(job);\n</code></pre>"},{"location":"usage/#processors","title":"Processors","text":"<p>Create <code>/path/to/scripts/myScript.js</code>:</p> <pre><code>module.exports = async function(job) {\n  console.log('processing', job.id, job.data);\n};\n</code></pre>"}]}